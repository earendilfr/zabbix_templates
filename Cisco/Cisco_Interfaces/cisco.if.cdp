#!/usr/bin/perl -w
#

use strict;
use warnings;
use utf8;

BEGIN {
	use Getopt::Long;
    Getopt::Long::Configure ("bundling");
    
    use Net::SNMP;
    use Data::Dumper;
    use Pod::Usage;
    use constant {
        OID_cdpCacheDeviceId => '1.3.6.1.4.1.9.9.23.1.2.1.1.6',
    };
}

# The functions
sub snmp_walk($);
sub snmp_get($);

my ($debug);
my ($hostname,$snmp_version,$snmp_community,$snmp_auth_username,$snmp_auth_password,$snmp_auth_protocol,$snmp_priv_password,$snmp_priv_protocol,$ifindex) = ('localhost',1,'public','','','md5','','des',0);

GetOptions(
    'debug|D' => \$debug,
) or pod2usage(
    -msg => 'error: bad options',
    -verbose => 1,
    -exitval => 1,
);

if (scalar(@ARGV) < 4) {
    pod2usage(
        -msg => 'error: Wrong number of parameters',
        -verbose => 1,
        -exitval => 1,
    );
}
$hostname = $ARGV[0];
$snmp_version = $1 if ($ARGV[1] =~ /^([1-3])/);
if ($snmp_version eq 2 || $snmp_version eq 1) {
    $snmp_community = $ARGV[2];
} else {
    ($snmp_auth_username,$snmp_auth_protocol,$snmp_auth_password,$snmp_priv_protocol,$snmp_priv_password) = split(/:/,$ARGV[2]);
}
$ifindex = $1 if ($ARGV[3] =~ /^(\d+)$/);

my ($session,$error);
if ($snmp_version eq 2 || $snmp_version eq 1) {
    ($session,$error) = Net::SNMP->session(
        -hostname => $hostname,
        -version => $snmp_version,
        -community => $snmp_community,
        -nonblocking => 0,
        -timeout => 3,
        -retries => 1);
} else {
    if ($snmp_auth_password eq "") {
        ($session,$error) = Net::SNMP->session(
            -hostname => $hostname,
            -version => $snmp_version,
            -username => $snmp_auth_username,
            -nonblocking => 0,
            -timeout => 3,
            -retries => 1);
    } elsif ($snmp_priv_password eq "") {
        ($session,$error) = Net::SNMP->session(
            -hostname => $hostname,
            -version => $snmp_version,
            -username => $snmp_auth_username,
            -authprotocol => $snmp_auth_protocol,
            -authpassword => $snmp_auth_password,
            -nonblocking => 0,
            -timeout => 3,
            -retries => 1);
    } else {
        ($session,$error) = Net::SNMP->session(
            -hostname => $hostname,
            -version => $snmp_version,
            -username => $snmp_auth_username,
            -authprotocol => $snmp_auth_protocol,
            -authpassword => $snmp_auth_password,
            -privprotocol => $snmp_priv_protocol,
            -privpassword => $snmp_priv_password,
            -nonblocking => 0,
            -timeout => 3,
            -retries => 1);
    }
}

if (!defined($session)) {
    die("ERROR: SNMP Error $error");
} elsif (!defined(snmp_get('1.3.6.1.2.1.1.2.0'))) {
    die("ERROR: Unable to connect with SNMP to host $hostname");
} elsif ($ifindex <= 0 || !defined(snmp_get("1.3.6.1.2.1.2.2.1.1.$ifindex"))) {
    die("ERROR: Indicate a valid IF-MIB ifIndex");
}

my $_tmp_cdp_neighbors = snmp_walk("@{[ OID_cdpCacheDeviceId ]}.$ifindex");
printf (STDERR "Debug: _tmp_cdp_neighbors=%s\n",Dumper($_tmp_cdp_neighbors)) if ($debug);
printf ("%s\n",join("|",values %$_tmp_cdp_neighbors));

exit(0);

sub snmp_walk($) {
    my ($oid) = @_;

    if (defined(my $_tmp = $session->get_table(-baseoid => $oid))) {
        my $result = {};
        while (my ($key,$val) = each %$_tmp) {
            my $index = $key;
            $index =~ s/^$oid\.//;
            $result->{$index} = $val;
        }
        return $result;
    }
    return {};
}

sub snmp_get($) {
    my ($oid) = @_;

    if (ref $oid eq ref []) {
        if (defined(my $_tmp = $session->get_request(-varbindlist => $oid))) {
            my $result = {};
            while (my ($key,$val) = each %$_tmp) {
                $result->{$key} = ($val !~ /noSuchInstance/i) ? $val : undef;
            }
            return $result;
        }
        return {};
    } else {
        if (defined(my $_tmp = $session->get_request(-varbindlist => [$oid]))) {
            return $_tmp->{$oid};
        }
        return undef;
    }
}

=head1 NAME

zabbix_if_ip.pl - Retrieve ip addr or netmask related to an ifIndex

=head1 SYNOPSIS

zabbix_if_ip.pl [options] $hostname (1|2|3) (<SNMP Community>|<SNMP username>:(md5|sha):<SNMP password>:(des|aes):<SNMP passphrase>)

  --debug | -D:              Enable debug

=cut

# vim: set tabstop=4 expandtab:
