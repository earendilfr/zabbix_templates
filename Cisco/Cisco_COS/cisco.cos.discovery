#!/usr/bin/perl -w
################################################################################
##
##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
#####################################################################################
#
# Scrupt to retrieve Cisco QOS information and retrieve Index part for Zabbix
#

use strict;
use warnings;
use utf8;

BEGIN {
    use Data::Dumper;
    use Pod::Usage;
    use Net::SNMP;
    use JSON qw(encode_json);

    use Getopt::Long;
    Getopt::Long::Configure ("bundling");
    
    use constant {
        OID_ifIndex => "1.3.6.1.2.1.2.2.1.1",
        OID_ifName => "1.3.6.1.2.1.31.1.1.1.1",
        OID_ifSpeed => "1.3.6.1.2.1.2.2.1.5",
        OID_ifHighSpeed => "1.3.6.1.2.1.31.1.1.1.15",
        OID_cbQosIfIndex => "1.3.6.1.4.1.9.9.166.1.1.1.1.4",
        OID_cbQosPolicyDirection => "1.3.6.1.4.1.9.9.166.1.1.1.1.3",
        OID_cbQosPolicyMapName => "1.3.6.1.4.1.9.9.166.1.6.1.1.1",
        OID_cbQosCMName => "1.3.6.1.4.1.9.9.166.1.7.1.1.1",
        OID_cbQosConfigIndex => "1.3.6.1.4.1.9.9.166.1.5.1.1.2",
        OID_cbQosObjectsType => "1.3.6.1.4.1.9.9.166.1.5.1.1.3",
        OID_cbQosTSCfgRate => "1.3.6.1.4.1.9.9.166.1.13.1.1.1",
        OID_cbQosParentObjectsIndex => "1.3.6.1.4.1.9.9.166.1.5.1.1.4",
    };
}

# The functions
sub snmp_walk($);
sub snmp_get($);

my $TrafficDirection = { 1 => 'input', 2 => 'output' };

## Start
#
my ($debug,$hostname);
my ($snmp_version,$snmp_community,$snmp_auth_username,$snmp_auth_password,$snmp_auth_protocol,$snmp_priv_password,$snmp_priv_protocol,$direction) = (1,'public','','','md5','','des','');

GetOptions(
    'debug|D' => \$debug,
) or pod2usage(
    -msg => 'error: bad options',
    -verbose => 1,
    -exitval => 1,
);

if (scalar(@ARGV) < 4) {
    pod2usage(
        -msg => 'error: Wrong number of parameters',
        -verbose => 1,
        -exitval => 1,
    );
}
$hostname = $ARGV[0];
$snmp_version = $1 if ($ARGV[1] =~ /^([1-3])/);
if ($snmp_version eq 2 || $snmp_version eq 1) {
    $snmp_community = $ARGV[2];
} else {
    ($snmp_auth_username,$snmp_auth_protocol,$snmp_auth_password,$snmp_priv_protocol,$snmp_priv_password) = split(/:/,$ARGV[2]);
}
$direction = $1 if ($ARGV[3] =~ /^(input|output)$/);

my ($session,$error);
if ($snmp_version eq 2 || $snmp_version eq 1) {
    ($session,$error) = Net::SNMP->session(
        -hostname => $hostname,
        -version => $snmp_version,
        -community => $snmp_community,
        -nonblocking => 0,
        -timeout => 3,
        -retries => 1);
} else {
    if ($snmp_auth_password eq "") {
        ($session,$error) = Net::SNMP->session(
            -hostname => $hostname,
            -version => $snmp_version,
            -username => $snmp_auth_username,
            -nonblocking => 0,
            -timeout => 3,
            -retries => 1);
    } elsif ($snmp_priv_password eq "") {
        ($session,$error) = Net::SNMP->session(
            -hostname => $hostname,
            -version => $snmp_version,
            -username => $snmp_auth_username,
            -authprotocol => $snmp_auth_protocol, 
            -authpassword => $snmp_auth_password,
            -nonblocking => 0,
            -timeout => 3,
            -retries => 1);
    } else {
        ($session,$error) = Net::SNMP->session(
            -hostname => $hostname,
            -version => $snmp_version,
            -username => $snmp_auth_username,
            -authprotocol => $snmp_auth_protocol,
            -authpassword => $snmp_auth_password,
            -privprotocol => $snmp_priv_protocol,
            -privpassword => $snmp_priv_password,
            -nonblocking => 0,
            -timeout => 3,
            -retries => 1);
    }
}

if (!defined($session)) {
    die("ERROR: SNMP Error $error");
} elsif (!defined($session->get_request(-varbindlist => ['.1.3.6.1.2.1.1.2.0']))) {
    die("ERROR: Unable to connect with SNMP to host $hostname");
} elsif ($direction !~ /^(input|output)$/) {
    die("ERROR: Indicate a valide QOS direction is mandatorry");
}

my $qos = {};
my $_tmp_qos_index = snmp_walk(OID_cbQosIfIndex);
my $_tmp_qos_direction = snmp_walk(OID_cbQosPolicyDirection);

# Perform a pre-check for Class-map
my $_tmp_cm_names = snmp_walk(OID_cbQosCMName);

while(my($qos_index,$if_index) = each %$_tmp_qos_index) {
    my ($qos_speed,$qos_speed_oid,$qos_dir,$qos_name,$if_name) = (0,'',$TrafficDirection->{$_tmp_qos_direction->{$qos_index}},'Unknown', 'Unknown');
    
    next if ($qos_dir ne $direction);

    # We need this result for the Future need
    my $_tmp_qos_config_indexes = snmp_walk("@{[ OID_cbQosConfigIndex ]}.$qos_index");
    my $_tmp_qos_parent_indexes = snmp_walk("@{[ OID_cbQosParentObjectsIndex ]}.$qos_index");

    # We retrieve the QOS name
    if (exists($_tmp_qos_config_indexes->{$qos_index})) {
        $qos_name = snmp_get("@{[ OID_cbQosPolicyMapName ]}.$_tmp_qos_config_indexes->{$qos_index}");
    } elsif(exists($_tmp_qos_config_indexes->{1})) {
        $qos_name = snmp_get("@{[ OID_cbQosPolicyMapName ]}.$_tmp_qos_config_indexes->{1}");
    }

    # We retrieve the interface name linked with this COS
    $if_name = snmp_get("@{[ OID_ifName ]}.$if_index");

    # We retrieve the COS speed
    my $_tmp_qos_type = snmp_walk("@{[ OID_cbQosObjectsType ]}.$qos_index");
    my @_tmp_qos_type_index = grep { $_tmp_qos_type->{$_} =~ /trafficShaping|6/ } keys %$_tmp_qos_type;

    if (@_tmp_qos_type_index && exists($_tmp_qos_config_indexes->{$_tmp_qos_type_index[0]})) {
        $qos_speed_oid = "@{[ OID_cbQosTSCfgRate ]}.$_tmp_qos_config_indexes->{$_tmp_qos_type_index[0]}";
        $qos_speed = snmp_get($qos_speed_oid);
    } elsif (defined($qos_speed = snmp_get("@{[ OID_ifHighSpeed ]}.$if_index")) && $qos_speed > 20) {
        $qos_speed_oid = "@{[ OID_ifHighSpeed ]}.$if_index";
        $qos_speed = $qos_speed * 1000000;
    } else {
        $qos_speed_oid = "@{[ OID_ifSpeed ]}.$if_index";
        $qos_speed = snmp_get($qos_speed_oid);
    }
    
    # Get Class-map indexes
    while (my ($key,$value) = each %$_tmp_qos_config_indexes) {
        if (exists($_tmp_cm_names->{$value}) && !($_tmp_qos_parent_indexes->{$key} eq $qos_index && $_tmp_cm_names->{$value} =~ /^class-default$/)) {
            if (!exists($qos->{"$qos_index.$key"})) {
                $qos->{"$qos_index.$key"} = {
                    "{#QOSINDEX}" => $qos_index,
                    "{#QOSNAME}" => $qos_name,
                    "{#QOSDIR}" => $qos_dir,
                    "{#QOSSPEED}" => $qos_speed,
                    "{#IFNAME}" => $if_name,
                    "{#CMINDEX}" => $key,
                    "{#CMNAME}" => $_tmp_cm_names->{$value},
                    "{#QOSSPEEDOID}" => $qos_speed_oid,
                 };
            }
        }
    }
}

if ($debug) {
    my $json = JSON->new();
    $json = $json->pretty(1);
    printf(STDERR "DEBUG: qos=%s\n",Dumper($qos));
    printf ("%s\n",$json->encode({data => [values %$qos]}));
} else {
    printf ("%s\n",encode_json({data => [values %$qos]}));
}

exit(0);

sub snmp_walk($) {
    my ($oid) = @_;

    if (defined(my $_tmp = $session->get_table(-baseoid => $oid))) {
        my $result = {};
        while (my ($key,$val) = each %$_tmp) {
            my $index = $key;
            $index =~ s/^$oid\.//;
            $result->{$index} = $val;
        }
        return $result;
    } 
    return {};
}

sub snmp_get($) {
    my ($oid) = @_;

    if (ref $oid eq ref []) {
        if (defined(my $_tmp = $session->get_request(-varbindlist => $oid))) {
            my $result = {};
            while (my ($key,$val) = each %$_tmp) {
                $result->{$key} = ($val !~ /noSuchInstance/i) ? $val : undef;
            }
            return $result;
        }
        return {};
    } else {
        if (defined(my $_tmp = $session->get_request(-varbindlist => [$oid]))) {
            return $_tmp->{$oid};
        }
        return undef;
    }
}

=head1 NAME

zabbix_cisco_cos.pl - Retrieve index for Cisco QOS and export it for Zabbix

=head1 SYNOPSIS

zabbix_cisco_cos.pl [options] $hostname (1|2|3) (<SNMP Community>|<SNMP username>:(md5|sha):<SNMP password>:(des|aes):<SNMP passphrase>)

  --debug | -D:              Enable debug

=cut

# vim: set tabstop=4 expandtab: 
